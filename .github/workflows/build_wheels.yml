name: Build and release wheels

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: {}

jobs:
  build-wheels:
    name: Build wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu: one job per Python version for maximum parallelism
          - os: ubuntu-latest
            cibw_build: "cp38-*"
            artifact_name: "ubuntu-latest-py38"
          - os: ubuntu-latest
            cibw_build: "cp39-*"
            artifact_name: "ubuntu-latest-py39"
          - os: ubuntu-latest
            cibw_build: "cp310-*"
            artifact_name: "ubuntu-latest-py310"
          - os: ubuntu-latest
            cibw_build: "cp311-*"
            artifact_name: "ubuntu-latest-py311"
          - os: ubuntu-latest
            cibw_build: "cp312-*"
            artifact_name: "ubuntu-latest-py312"
          - os: ubuntu-latest
            cibw_build: "cp313-*"
            artifact_name: "ubuntu-latest-py313"
          # macOS x86_64
          - os: macos-13
            mac_archs: x86_64
            mac_deploy: "10.13"
            cibw_build: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
            artifact_name: "macos-13"
          # macOS arm64
          - os: macos-14
            mac_archs: arm64
            mac_deploy: "11.0"
            cibw_build: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
            artifact_name: "macos-14"
          # Windows
          - os: windows-latest
            cibw_build: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
            artifact_name: "windows-latest"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Enable QEMU (for aarch64 on Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel

      - name: Cache ccache (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/cache@v4
        with:
          path: .ccache
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', 'setup.py') }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.ref }}-
            ccache-${{ runner.os }}-

      - name: Build wheels
        env:
          # Build selected CPython versions per-matrix entry; skip PyPy and musllinux
          CIBW_BUILD: "${{ matrix.cibw_build }}"
          CIBW_SKIP: "pp* *musllinux*"
          CIBW_BUILD_VERBOSITY: "1"
          # Install cmake/ninja once per environment
          CIBW_BEFORE_ALL: "python -m pip install --upgrade pip && pip install 'cmake<4' ninja"
          # On Windows, avoid '<' redirection by pinning a 3.x CMake explicitly
          CIBW_BEFORE_ALL_WINDOWS: "python -m pip install --upgrade pip && pip install cmake==3.27.9 ninja"
          # Linux archs: include aarch64 only on tags (avoid QEMU on regular runs)
          CIBW_ARCHS_LINUX: "${{ startsWith(github.ref, 'refs/tags/') && 'x86_64 aarch64' || 'x86_64' }}"
          # Enable ccache inside manylinux containers
          CIBW_BEFORE_ALL_LINUX: "yum -y install ccache || dnf -y install ccache || microdnf -y install ccache || true"
          CIBW_ENVIRONMENT_LINUX: "CMAKE_C_COMPILER_LAUNCHER=ccache CMAKE_CXX_COMPILER_LAUNCHER=ccache CCACHE_DIR=/ccache CCACHE_MAXSIZE=1G"
          CIBW_MANYLINUX_X86_64_EXTRA_ARGS: "--volume ${{ github.workspace }}/.ccache:/ccache"
          CIBW_MANYLINUX_AARCH64_EXTRA_ARGS: "--volume ${{ github.workspace }}/.ccache:/ccache"
          # Use manylinux 2.28 images for newer Python/GLIBC compatibility
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
          CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux_2_28"
          # macOS arch/deployment target are set per-runner
          CIBW_ARCHS_MACOS: "${{ matrix.mac_archs }}"
          MACOSX_DEPLOYMENT_TARGET: "${{ matrix.mac_deploy }}"
          # Windows: build 64-bit only (SEAL/this project target x64)
          CIBW_ARCHS_WINDOWS: "AMD64"
          # Extra diagnostics for macOS delocate failures
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "delocate-listdeps {wheel} && delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel}"
          # Use manylinux2014 (default), OK for cp38/cp39
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        timeout-minutes: 120

      - name: Upload wheels (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: wheelhouse-${{ matrix.artifact_name }}
          path: wheelhouse/*.whl

  release:
    name: Create GitHub Release and attach wheels
    needs: [build-wheels]
    if: ${{ always() && startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Gather wheels
        run: |
          mkdir -p upload
          find dist -name "*.whl" -exec cp {} upload/ \;
          ls -al upload

      - name: Create Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: upload/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


